/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package jdbc.view;

/**
 *
 * @author driven
 */
import jdbc.model.Mahasiswa;
import jdbc.service.MysqlMahasiswaService;
import java.awt.Font;
import java.util.List;
import javax.swing.*;
import java.awt.Color;

public class MahasiswaForm extends javax.swing.JFrame {
    
    private MysqlMahasiswaService mahasiswaService;
    private List<Mahasiswa> mahasiswaList;
    private DefaultListModel<String> idListModel;
    private DefaultListModel<String> namaListModel;
    
    public MahasiswaForm() {
        initComponents();
        
        // Set title
        setTitle("Kelola Data Mahasiswa");
        
        // Center on screen
        setLocationRelativeTo(null);
        
        // Initialize service
        mahasiswaService = new MysqlMahasiswaService();
        
        // Initialize list models
        idListModel = new DefaultListModel<>();
        namaListModel = new DefaultListModel<>();
        
        // Set models to lists
        listId.setModel(idListModel);
        listNama.setModel(namaListModel);
        
        // Add custom initialization code
        setupCustomComponents();
        
        // Set up list listeners
        setupListeners();
        
        // Set the heading font
        lblHeader.setFont(new Font("Dialog", Font.BOLD, 20));
    }
    
    private void setupCustomComponents() {
        // Set background color
        getContentPane().setBackground(new Color(224, 224, 224));
        
        // Set enabled states for edit and delete fields
        txtEdit.setEnabled(false);
        txtHapus.setEnabled(false);
        
        // Additional UI setup if needed
    }
    
    private void setupListeners() {
        // Synchronize selection between lists
        listId.addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting() && listId.getSelectedIndex() != -1) {
                listNama.setSelectedIndex(listId.getSelectedIndex());
                
                int index = listId.getSelectedIndex();
                if (index >= 0 && index < mahasiswaList.size()) {
                    Mahasiswa mhs = mahasiswaList.get(index);
                    txtEdit.setText(mhs.getNama());
                    txtHapus.setText(mhs.getNama());
                }
            }
        });
        
        listNama.addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting() && listNama.getSelectedIndex() != -1) {
                listId.setSelectedIndex(listNama.getSelectedIndex());
            }
        });
        
        // Checkbox listeners
        chkEdit.addActionListener(e -> txtEdit.setEnabled(chkEdit.isSelected()));
        chkHapus.addActionListener(e -> txtHapus.setEnabled(chkHapus.isSelected()));
    }
    
    private void ambilData() {
        try {
            // Clear lists
            idListModel.clear();
            namaListModel.clear();
            
            // Fetch data
            mahasiswaList = mahasiswaService.getAllMahasiswa();
            
            // Populate lists
            for (Mahasiswa mhs : mahasiswaList) {
                idListModel.addElement(String.valueOf(mhs.getId()));
                namaListModel.addElement(mhs.getNama());
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                    "Error loading data: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void resetFields() {
        // Clear selections and fields
        listId.clearSelection();
        listNama.clearSelection();
        lblNama.setText("");
        txtEdit.setText("");
        txtHapus.setText("");
        chkEdit.setSelected(false);
        chkHapus.setSelected(false);
        txtEdit.setEnabled(false);
        txtHapus.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listId = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        listNama = new javax.swing.JList<>();
        lblId = new javax.swing.JLabel();
        lblNama = new javax.swing.JLabel();
        lblHeader = new javax.swing.JLabel();
        btnAmbilData = new javax.swing.JButton();
        lblNamaInput = new javax.swing.JLabel();
        txtNama = new javax.swing.JTextField();
        btnTambahkan = new javax.swing.JButton();
        txtEdit = new javax.swing.JTextField();
        chkEdit = new javax.swing.JCheckBox();
        chkHapus = new javax.swing.JCheckBox();
        txtHapus = new javax.swing.JTextField();
        btnEdit = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        btnResetIndeks = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        listId.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(listId);

        listNama.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(listNama);

        lblId.setText("ID");

        lblNama.setText("Nama:");

        lblHeader.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        lblHeader.setText("Kelola Data Mahasiswa");

        btnAmbilData.setText("Ambil Semua Data");
        btnAmbilData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAmbilDataActionPerformed(evt);
            }
        });

        lblNamaInput.setText("nama :");

        txtNama.setText("cipta");
        txtNama.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNamaActionPerformed(evt);
            }
        });

        btnTambahkan.setText("Tambahkan");
        btnTambahkan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahkanActionPerformed(evt);
            }
        });

        txtEdit.setText("fikriw");
        txtEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEditActionPerformed(evt);
            }
        });

        txtHapus.setText("fikriw");

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnHapus.setText("Hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        btnResetIndeks.setText("Reset indeks");
        btnResetIndeks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetIndeksActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNama)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblHeader)
                        .addGap(25, 25, 25))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(btnAmbilData))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnTambahkan)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(6, 6, 6)
                                            .addComponent(txtNama, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(lblNamaInput))))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(chkHapus)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtHapus))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(chkEdit)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnHapus)
                                    .addComponent(btnEdit)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(btnResetIndeks)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblId)
                            .addComponent(lblNama)))
                    .addComponent(lblHeader))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(btnAmbilData)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblNamaInput)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTambahkan)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chkEdit)
                            .addComponent(btnEdit))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkHapus)
                            .addComponent(txtHapus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnHapus))
                        .addGap(41, 41, 41)
                        .addComponent(btnResetIndeks)))
                .addContainerGap(159, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTambahkanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahkanActionPerformed
        // TODO add your handling code here:
                try {
            String nama = txtNama.getText().trim();
            if (nama.isEmpty()) {
                JOptionPane.showMessageDialog(this, 
                        "Nama tidak boleh kosong", 
                        "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Create new mahasiswa object with auto-generated ID
            Mahasiswa mhs = new Mahasiswa();
            mhs.setNama(nama);
            
            // Save to database
            mahasiswaService.insert(mhs);
            
            // Refresh data
            ambilData();
            
            // Clear field
            txtNama.setText("");
            
            JOptionPane.showMessageDialog(this, "Data berhasil ditambahkan");
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                    "Error: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnTambahkanActionPerformed

    private void txtEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEditActionPerformed
        // TODO add your handling code here: reset palsu
    }//GEN-LAST:event_txtEditActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here: edti asli
         try {
            if (!chkEdit.isSelected()) {
                JOptionPane.showMessageDialog(this, 
                        "Pilih checkbox terlebih dahulu",
                        "Information", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            
            int index = listId.getSelectedIndex();
            if (index == -1) {
                JOptionPane.showMessageDialog(this, 
                        "Pilih data yang akan diedit",
                        "Information", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            
            String namaEdit = txtEdit.getText().trim();
            if (namaEdit.isEmpty()) {
                JOptionPane.showMessageDialog(this, 
                        "Nama tidak boleh kosong", 
                        "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Get ID from selected item
            int id = Integer.parseInt(idListModel.getElementAt(index));
            
            // Create object
            Mahasiswa mhs = new Mahasiswa(id, namaEdit);
            
            // Update in database
            mahasiswaService.update(mhs);
            
            // Refresh data
            ambilData();
            
            // Reset fields
            resetFields();
            
            JOptionPane.showMessageDialog(this, "Data berhasil diupdate");
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                    "Error: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnAmbilDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAmbilDataActionPerformed
        // TODO add your handling code here:
        ambilData();
    }//GEN-LAST:event_btnAmbilDataActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        // TODO add your handling code here:
                try {
            if (!chkHapus.isSelected()) {
                JOptionPane.showMessageDialog(this, 
                        "Pilih checkbox terlebih dahulu",
                        "Information", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            
            int index = listId.getSelectedIndex();
            if (index == -1) {
                JOptionPane.showMessageDialog(this, 
                        "Pilih data yang akan dihapus",
                        "Information", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            
            // Get ID from selected item
            int id = Integer.parseInt(idListModel.getElementAt(index));
            
            // Confirm deletion
            int confirm = JOptionPane.showConfirmDialog(this, 
                    "Apakah anda yakin ingin menghapus data ini?", 
                    "Konfirmasi", JOptionPane.YES_NO_OPTION);
            
            if (confirm == JOptionPane.YES_OPTION) {
                // Delete from database
                mahasiswaService.delete(id);
                
                // Refresh data
                ambilData();
                
                // Reset fields
                resetFields();
                
                JOptionPane.showMessageDialog(this, "Data berhasil dihapus");
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                    "Error: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnResetIndeksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetIndeksActionPerformed
        // TODO add your handling code here:
        resetFields();
    }//GEN-LAST:event_btnResetIndeksActionPerformed

    private void txtNamaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNamaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNamaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MahasiswaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MahasiswaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MahasiswaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MahasiswaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MahasiswaForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAmbilData;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnResetIndeks;
    private javax.swing.JButton btnTambahkan;
    private javax.swing.JCheckBox chkEdit;
    private javax.swing.JCheckBox chkHapus;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblNama;
    private javax.swing.JLabel lblNamaInput;
    private javax.swing.JList<String> listId;
    private javax.swing.JList<String> listNama;
    private javax.swing.JTextField txtEdit;
    private javax.swing.JTextField txtHapus;
    private javax.swing.JTextField txtNama;
    // End of variables declaration//GEN-END:variables
}
